// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String   // Hashed password
  name      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  apiKeys   ApiKey[]
  sessions  Session[]
  agents    Agent[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String   // e.g., "OpenRouter Production", "OpenRouter Dev"
  provider    String   // e.g., "openrouter", "openai"
  keyValue    String   // Encrypted API key
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, provider])
}

model Agent {
  id           String   @id @default(cuid())
  userId       String   // User who created this agent
  name         String
  role         String
  description  String
  personality  String
  expertise    String   // JSON array stored as string
  systemPrompt String
  avatar       String
  color        String
  restrictions String?  // JSON array stored as string
  examples     String   // JSON array stored as string
  isActive     Boolean  @default(true)
  isPublic     Boolean  @default(false) // Whether other users can see this agent
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}